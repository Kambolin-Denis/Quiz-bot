import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram import F
from data import quiz_data
from DB import (
    get_quiz_index, update_quiz_index, create_table, 
    save_user_answer, get_user_answers, clear_user_answers,
    save_quiz_result, get_user_stats, get_leaderboard
)
from questions import get_question

logging.basicConfig(level=logging.INFO)
API_TOKEN = '8435487987:AAGCqaQHa5aw5ly__iLqFgYBLlS9usis2FI'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
DB_NAME = 'quiz_bot.db'

async def show_final_results(message: types.Message, user_id: int, username: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    user_answers = await get_user_answers(user_id)
    score = sum(1 for answer in user_answers if answer['is_correct'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∏–∑–∞
    await save_quiz_result(user_id, username, score, len(quiz_data))
    
    result_text = f"üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(quiz_data)}\n\n"
    result_text += "üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤:\n\n"
    
    for i, answer in enumerate(user_answers):
        question_data = quiz_data[answer['question_index']]
        user_answer_text = question_data['options'][answer['user_answer']]
        correct_answer_text = question_data['options'][question_data['correct_option']]
        
        result_text += f"{i+1}. {question_data['question']}\n"
        result_text += f"   –í–∞—à –æ—Ç–≤–µ—Ç: {user_answer_text} {'‚úÖ' if answer['is_correct'] else '‚ùå'}\n"
        if not answer['is_correct']:
            result_text += f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_text}\n"
        result_text += "\n"
    
    result_text += f"üèÜ –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {score}/{len(quiz_data)}\n\n"
    
    stats = await get_user_stats(user_id)
    result_text += f"üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    result_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['last_score']}/{stats['last_total']}\n"
    result_text += f"‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']}/{stats['best_total']}\n"
    result_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ –∫–≤–∏–∑–æ–≤: {stats['total_quizzes']}"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="show_leaderboard")
    builder.button(text="üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑", callback_data="restart_quiz")
    
    await message.answer(result_text, reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery):
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    user_id = callback.from_user.id
    current_question_index = await get_quiz_index(user_id)
    question_data = quiz_data[current_question_index]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
    selected_option = int(callback.data.split("_")[1])
    user_answer_text = question_data['options'][selected_option]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    is_correct = selected_option == question_data['correct_option']
    
 
    await save_user_answer(
        user_id,
        current_question_index,
        selected_option,
        is_correct
    )
    
    if is_correct:
        await callback.message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        correct_answer_text = question_data['options'][question_data['correct_option']]
        await callback.message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_text}")
    
    current_question_index += 1
    await update_quiz_index(user_id, current_question_index)

    if current_question_index < len(quiz_data):
        await get_question(callback.message, user_id)
    else:
        username = callback.from_user.username or callback.from_user.first_name
        await show_final_results(callback.message, user_id, username)
    
    await callback.answer()

@dp.callback_query(F.data == "show_leaderboard")
async def show_leaderboard_handler(callback: types.CallbackQuery):
    leaderboard = await get_leaderboard()
    
    if not leaderboard:
        await callback.message.answer("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
        return
    
    leaderboard_text = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    
    for i, player in enumerate(leaderboard[:10], 1):
        username = player['username'] or f"–ò–≥—Ä–æ–∫ {player['user_id']}"
        leaderboard_text += f"{i}. {username} - {player['best_score']}/{player['best_total']} "
        leaderboard_text += f"(–ø–æ—Å–ª–µ–¥–Ω–∏–π: {player['last_score']}/{player['last_total']})\n"
    
    await callback.message.answer(leaderboard_text)
    await callback.answer()

@dp.callback_query(F.data == "restart_quiz")
async def restart_quiz_handler(callback: types.CallbackQuery):
    await new_quiz(callback.message)
    await callback.answer()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    builder.add(types.KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    builder.add(types.KeyboardButton(text="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@dp.message(Command("stat"))
async def show_my_stats(message: types.Message):
    stats = await get_user_stats(message.from_user.id)
    
    if stats['total_quizzes'] == 0:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∫–≤–∏–∑—ã. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É!")
        return
    
    stats_text = "üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    stats_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['last_score']}/{stats['last_total']}\n"
    stats_text += f"‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']}/{stats['best_total']}\n"
    stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ –∫–≤–∏–∑–æ–≤: {stats['total_quizzes']}\n"
    stats_text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['accuracy']:.1f}%"
    
    await message.answer(stats_text)

@dp.message(F.text == "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
@dp.message(Command("leaderboard"))
async def show_leaderboard_message(message: types.Message):
    leaderboard = await get_leaderboard()
    
    if not leaderboard:
        await message.answer("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
        return
    
    leaderboard_text = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    
    for i, player in enumerate(leaderboard[:10], 1):
        username = player['username'] or f"–ò–≥—Ä–æ–∫ {player['user_id']}"
        leaderboard_text += f"{i}. {username} - {player['best_score']}/{player['best_total']} "
        leaderboard_text += f"(–ø–æ—Å–ª–µ–¥–Ω–∏–π: {player['last_score']}/{player['last_total']})\n"
    
    await message.answer(leaderboard_text)

async def new_quiz(message):
    user_id = message.from_user.id
    current_question_index = 0
    await clear_user_answers(user_id)
    await update_quiz_index(user_id, current_question_index)
    await get_question(message, user_id)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /quiz
@dp.message(F.text=="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
@dp.message(Command("quiz"))
async def cmd_quiz(message: types.Message):
    await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    await new_quiz(message)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await create_table()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())